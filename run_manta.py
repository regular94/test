'''
    Date: 2024-09-20
    Author: duaghk
    Purpose: Run Manta structural variant caller.
'''

import subprocess as sp
from pathlib import Path

class RunManta:
    """
        A class to configure, run, and parse output from the Manta structural variant caller.

        Args:
            args: An argparse.Namespace object containing required arguments.
    """
    def __init__(self, args) -> None:
        """
            Initializes the RunManta class with necessary parameters.

            Args:
                args: An argparse.Namespace object with attributes:
                    - fasta_path: Path to the reference FASTA file.
                    - manta_sif: Path to the Manta Singularity image (.sif file).
                    - bind_dir_list: List of directories to bind in Singularity.
                    - config_path: Path to the Manta configuration script within the Singularity image.
                    - threads: Number of threads to use.
                    - mems: Amount of memory (in GB) to allocate.
        """
        self.fasta_path = args.fasta_path
        self.manta_sif = args.manta_sif
        self.bind_dir = ",".join(args.bind_dir_list)
        self.config_path = args.config_path  # Config path in Manta Singularity
        self.threads = args.threads
        self.mems = args.mems

    def run_subprocess(func):
        """
            Decorator to run a shell command generated by the decorated function in a subprocess.

            The decorated function must return a string that represents the shell command to be executed.

            Args:
                func (function): The function that generates the shell command.

            Returns:
                function: The wrapper function that executes the shell command.
        """
        def wrapper(*args, **kwargs):
            cmd = func(*args, **kwargs)
            print(cmd)
            proc = sp.run(cmd, shell=True, text=True, stdout=sp.PIPE, stderr=sp.PIPE)
            if proc.returncode:
                raise sp.CalledProcessError(proc.returncode, cmd, output=proc.stdout, stderr=proc.stderr)
            return proc.stdout
        return wrapper

    @run_subprocess
    def config_manta(self, run_dir: Path, bam_path: Path) -> str:
        """
            Generates and returns the command to configure Manta for the given BAM file.

            Args:
                run_dir (Path): The directory where Manta will run.
                bam_path (Path): The path to the input BAM file.

            Returns:
                str: The shell command to configure Manta.
        """
        cmd = (
            f"singularity exec "
            f"-B {self.bind_dir} "
            f"{self.manta_sif} "
            f"python2 {self.config_path} "
            f"--bam {bam_path} "
            f"--generateEvidenceBam "
            f"--referenceFasta {self.fasta_path} "
            f"--runDir {run_dir} "
        )
        return cmd

    @run_subprocess
    def run_manta(self, run_dir: Path) -> str:
        """
            Generates and returns the command to execute the Manta workflow.

            Args:
                run_dir (Path): The directory where Manta was configured.

            Returns:
                str: The shell command to run the Manta workflow.
        """
        run_path = run_dir / "runWorkflow.py"
        cmd = (
            f"singularity exec "
            f"-B {self.bind_dir} "
            f"{self.manta_sif} "
            f"python2 {run_path} "
            f"--jobs {self.threads} "
            f"--memGb {self.mems} "
        )
        return cmd

    @run_subprocess
    def parse_output(self, run_dir: Path, output_path: Path) -> str:
        """
            Generates and returns the command to parse Manta output VCF and extract relevant information.

            Args:
                run_dir (Path): The directory where Manta was run.
                output_path (Path): The path to the output TSV file.

            Returns:
                str: The shell command to parse Manta output.
        """
        result_vcf = run_dir / "results" / "variants" / "diploidSV.vcf.gz"
        include_list = [
            'FORMAT/FT="PASS"',
            'INFO/SVTYPE!="BND"',
            'INFO/IMPRECISE!=1',
            'abs(INFO/SVLEN)>=100000',
            'abs(INFO/SVLEN)<=1200000'
        ]
        include_options = " & ".join(include_list)
        query_list = [
            '%CHROM',
            '%POS',
            '%END',
            '%SVTYPE',
            '%ALT',
            '%SVLEN',
            '%FILTER',
            '[%FT]',
            '[%PR]',
            '[%SR]\n'
        ]
        query_options = "\t".join(query_list)
        col_list = [
            'chrom',
            'start',
            'end',
            'svtype',
            'alt',
            'svlen',
            'filter',
            'sample_filter',
            'spanning_reads',
            'split_reads'
        ]
        header = "\t".join(col_list)
        cmd = (
            f"bcftools view "
            f"-i '{include_options}' "
            f"--threads {self.threads} "
            f"{result_vcf} | "
            f"bcftools query "
            f"-f '{query_options}' | "
            f"( echo \"{header}\" ; cat ) "
            f"> {output_path}"
        )
        return cmd

    def __call__(self, args) -> Path:
        """
            Executes the full Manta workflow: configuration, execution, and output parsing.

            Args:
                args: An argparse.Namespace object containing necessary arguments:
                    - bam_path: Path to the input BAM file.
                    - output_dir: Directory to store the output files.

            Returns:
                Path: The path to the parsed output TSV file.
        """
        sample_id = args.bam_path.name.split(".")[0]
        run_dir = args.output_dir / sample_id
        self.config_manta(run_dir, args.bam_path)
        self.run_manta(run_dir)
        parsed_output = run_dir / f"{sample_id}.SV.tsv"
        self.parse_output(run_dir, parsed_output)
        return parsed_output

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Run Manta structural variant caller.")
    parser.add_argument("--bam_path", type=Path, required=True, help="Path to the input BAM file.")
    parser.add_argument("--output_dir", type=Path, required=True, help="Directory to store the output files.")
    parser.add_argument("--manta_sif", type=Path, default=Path("/storage/images/manta-1.6.0.sif"), help="Path to the Manta Singularity image (.sif file).")
    parser.add_argument("--bind_dir_list", nargs='+', default=["/storage", "/data"], help="List of directories to bind in Singularity.")
    parser.add_argument("--config_path", type=Path, default=Path("/opt/manta/bin/configManta.py"), help="Path to the Manta configuration script within the Singularity image.")
    parser.add_argument("--fasta_path", type=Path, default=Path("/storage/references_and_index/hg38/fasta/Homo_sapiens_assembly38.fasta"), help="Path to the reference FASTA file.")
    parser.add_argument("--threads", type=int, default=4, help="Number of threads to use.")
    parser.add_argument("--mems", type=int, default=16, help="Amount of memory (in GB) to allocate.")

    args = parser.parse_args()

    manta_runner = RunManta(args)
    output_tsv = manta_runner(args)
    print(f"Parsed output saved to: {output_tsv}")

'''
    Run command:
        python3.9 run_manta.py \
            --fasta_path /path/to/reference.fasta \
            --manta_sif /path/to/manta.sif \
            --bind_dir_list /path/to/dir1 /path/to/dir2 \
            --config_path /path/inside/singularity/configManta.py \
            --threads 4 \
            --mems 16 \
            --bam_path /path/to/sample.bam \
            --output_dir /path/to/output
'''